# The name of the workflow as it will appear in the "Actions" tab of the GitHub repository.
name: run-selenium-tests
# The name for workflow runs generated from the workflow, which will appear in the list of workflow runs on your repository's "Actions" tab.
run-name: ${{ github.actor }} is learning GitHub Actions
# Specifies the trigger for this workflow. 
on: [push]
# Groups together all the jobs that run in the workflow.
jobs:
  # Defines a job
  run-tests:
    runs-on: ubuntu-latest
    # Groups together all the steps that run in the job
    
    steps:
    #   This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code
      - uses: actions/checkout@v3
      - name: Set up Python $3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Set up Selenium Grid
        run: docker-compose up -d --scale chrome=5 --scale firefox=0
      - name : check status of grid
        run: |
          set -e
          url="http://localhost:4444/wd/hub/status"
          wait_interval_in_seconds=1
          max_wait_time_in_seconds=30
          end_time=$((SECONDS + max_wait_time_in_seconds))
          time_left=$max_wait_time_in_seconds
          
          while [ $SECONDS -lt $end_time ]; do
              response=$(curl -sL "$url" | jq -r '.value.ready')
              if [ -n "$response"  ]  && [ "$response" ]; then
                  echo "Selenium Grid is up - executing tests"
                  break
              else
                  echo "Waiting for the Grid. Sleeping for $wait_interval_in_seconds second(s). $time_left seconds left until timeout."
                  sleep $wait_interval_in_seconds
                  time_left=$((time_left - wait_interval_in_seconds))
              fi
          done
          
          if [ $SECONDS -ge $end_time ]; then
              echo "Timeout: The Grid was not started within $max_wait_time_in_seconds seconds."
              exit 1
          fi
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test with pytest
        run: pytest -n 5
      - name: Stop Docker
        run: docker-compose down